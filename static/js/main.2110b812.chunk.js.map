{"version":3,"sources":["atoms.js","selectors.js","components/Game.js","components/Score.js","components/Gems.js","components/HighScore.js","App.js","reportWebVitals.js","index.js"],"names":["gameScore","atom","key","default","paperSize","selector","get","GameScore","fetchHighScore","a","Promise","resolve","reject","setTimeout","highScores","Game","useRecoilState","scroe","setScore","size","useRecoilValue","style","fontSize","onClick","Score","resetScore","useResetScore","Gems","Array","map","n","i","HighScore","highScore","App","className","Suspense","fallback","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4OAEMA,EAAYC,YAAK,CACnBC,IAAK,YACLC,QAAS,I,uBCAPC,EAAYC,YAAS,CACvBH,IAAK,YACLI,IAAK,YAED,OAAO,IAAe,GADRA,EADH,EAARA,KACeC,MAKpBC,EAAc,uCAAG,sBAAAC,EAAA,+EAChB,IAAIC,SAAQ,SAACC,EAASC,GACzBC,YAAW,WACPF,EAAQ,OACT,SAJgB,2CAAH,qDAQdG,EAAaT,YAAS,CACxBH,IAAK,YACLI,IAAI,WAAD,4BAAE,uBAAAG,EAAA,+DAAQH,IAAR,SACYE,IADZ,mFAAF,mDAAC,K,OCJOO,EAdF,WACT,MAA0BC,YAAeT,GAAzC,mBAAOU,EAAP,KAAcC,EAAd,KAIMC,EAAOC,YAAehB,GAE5B,OACI,wBAAQiB,MAAO,CAAEC,SAAUH,GAAQI,QANpB,WACfL,EAASD,EAAQ,IAKjB,2BCCOO,EAXD,WACV,IAAMP,EAAQG,YAAeb,GACvBkB,EHGY,WAClB,MAA0BT,YAAehB,GAAzC,mBAAckB,GAAd,WACA,OAAO,WACHA,EAAS,IGNMQ,GACnB,OACI,gCACI,wBAAQH,QAASE,EAAjB,mBADJ,WAEaR,M,OCQNU,EAdF,WACT,IAAMV,EAAQG,YAAeb,GAE7B,OACI,8BAEQ,YAAIqB,MAAMX,IAAQY,KAAI,SAACC,EAAGC,GACtB,OAAQ,+CAAWA,SCExBC,EATG,WACd,IAAMC,EAAYb,YAAeN,GACjC,OACI,gDACkBmB,MCqBXC,MAjBf,WACE,OACE,cAAC,IAAD,UACE,sBAAKC,UAAU,MAAf,UACE,mDACA,cAAC,IAAMC,SAAP,CAAgBC,SAAU,6CAA1B,SACE,cAAC,EAAD,MAEF,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,UCROC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2110b812.chunk.js","sourcesContent":["import { atom, useRecoilState } from \"recoil\";\r\n\r\nconst gameScore = atom({\r\n    key: 'gameScore',\r\n    default: 0\r\n})\r\n\r\nconst useResetScore = () => {\r\n    const [score, setScore] = useRecoilState(gameScore);\r\n    return () => {\r\n        setScore(0)\r\n    }\r\n}\r\n\r\nexport { gameScore as GameScore, useResetScore }","import { selector } from \"recoil\";\r\n\r\nimport { GameScore } from \"./atoms\";\r\n\r\nconst paperSize = selector({\r\n    key: 'paperSize',\r\n    get: ({get})=> {\r\n        const score = get(GameScore)\r\n        return 100 + (score * 5)\r\n    }\r\n})\r\n\r\nconst fetchHighScore = async ()=> {\r\nreturn new Promise((resolve, reject)=> {\r\n    setTimeout(() => {\r\n        resolve(303)\r\n    }, 1000);\r\n})\r\n}\r\n\r\nconst highScores = selector({\r\n    key: 'highScore',\r\n    get: async ({get})=> {\r\n        return await fetchHighScore()\r\n    }\r\n})\r\n\r\nexport {paperSize, highScores}","import { useRecoilState, useRecoilValue } from 'recoil';\r\nimport { GameScore } from '../atoms';\r\nimport { paperSize } from '../selectors';\r\n\r\nconst Game = () => {\r\n    const [scroe, setScore] = useRecoilState(GameScore);\r\n    const paperClick = () => {\r\n        setScore(scroe + 1)\r\n    }\r\n    const size = useRecoilValue(paperSize)\r\n\r\n    return (\r\n        <button style={{ fontSize: size }} onClick={paperClick}>\r\n            ðŸŽˆ\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Game;","import { useRecoilValue } from 'recoil';\r\nimport { GameScore, useResetScore } from '../atoms';\r\nconst Score = () => {\r\n    const scroe = useRecoilValue(GameScore);\r\n    const resetScore = useResetScore()\r\n    return (\r\n        <div>\r\n            <button onClick={resetScore}>Reset</button>\r\n            Score : {scroe}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Score;","import { useRecoilValue } from 'recoil';\r\nimport { GameScore } from '../atoms';\r\nconst Gems = () => {\r\n    const scroe = useRecoilValue(GameScore);\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                [...Array(scroe)].map((n, i)=> {\r\n                    return  <span key={i}>ðŸ’Ž</span>\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Gems;","import { useRecoilValue } from 'recoil';\r\nimport { highScores } from '../selectors';\r\nconst HighScore = () => {\r\n    const highScore = useRecoilValue(highScores);\r\n    return (\r\n        <div>\r\n            High Score : {highScore}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HighScore;","import React from 'react';\nimport './App.css';\n\nimport Game from './components/Game';\nimport Score from './components/Score';\nimport Gems from './components/Gems';\nimport HighScore from './components/HighScore';\n\nimport { RecoilRoot } from 'recoil';\n\nfunction App() {\n  return (\n    <RecoilRoot>\n      <div className=\"App\">\n        <h1>Balloon inflation</h1>\n        <React.Suspense fallback={<div>Loaging...</div> }>\n          <HighScore />\n        </React.Suspense>\n        <Score />\n        <Game />\n        <Gems />\n\n      </div>\n    </RecoilRoot>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}